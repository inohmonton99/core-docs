(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{124:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),l=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},f=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),f=a,d=u["".concat(i,".").concat(f)]||u[f]||m[f]||r;return n?o.a.createElement(d,s(s({ref:t},p),{},{components:n})):o.a.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(2),o=(n(0),n(124));const r={title:"Working with artifacts",sidebar_label:"Working with artifacts",description:"Onepanel - Working with artifacts"},i={unversionedId:"reference/workflows/artifacts",id:"reference/workflows/artifacts",isDocsHomePage:!1,title:"Working with artifacts",description:"Onepanel - Working with artifacts",source:"@site/docs/reference/workflows/artifacts.md",slug:"/reference/workflows/artifacts",permalink:"/docs/reference/workflows/artifacts",editUrl:"https://github.com/onepanelio/core-docs/tree/master/docs/reference/workflows/artifacts.md",version:"current",sidebar_label:"Working with artifacts",sidebar:"reference",previous:{title:"Workflow Templates",permalink:"/docs/reference/workflows/templates"},next:{title:"Creating a Workflow Template",permalink:"/docs/reference/workflows/create"}},s=[{value:"S3",id:"s3",children:[]},{value:"Git",id:"git",children:[]},{value:"HTTP",id:"http",children:[]},{value:"Options",id:"options",children:[{value:"Archive",id:"archive",children:[]},{value:"Optional",id:"optional",children:[]}]},{value:"Passing artifacts",id:"passing-artifacts",children:[]}],c={rightToc:s};function p({components:e,...t}){return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"When running Workflows, it is very common to have steps that generate or consume artifacts. Often, the output artifacts of one task may be used as input artifacts to a subsequent task."),Object(o.b)("p",null,"Onepanel's Workflows support s3, git and http artifacts."),Object(o.b)("h2",{id:"s3"},"S3"),Object(o.b)("p",null,"Example below shows how you can download or upload artifacts from or to default and custom object storage locations:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"entrypoint: main\narguments:\n  # Workflow parameters which will be set by user via Web UI, SDK or API\n  parameters:\n  - name: model-path\n    value: my-data/output\ntemplates:\n- name: main\n  dag:\n    tasks:\n    - name: input-output\n      template: input-output\n- name: input-output\n  container:\n    args:\n    - |\n      printenv \\\n      && ls /tmp/input \\\n        && mkdir -p /tmp/output \\\n        && echo \"hello\" > /tmp/output/message.txt \\\n        && sleep 15\n    command:\n    - bash\n    - -c\n    image: bash\n  inputs:\n    artifacts:\n    # Download files from S3 prefix random/input into local folder /tmp/input/\n    # # This downloads from the default S3 artifact repository for this namespace\n    - name: input\n      path: /tmp/input/\n      s3:\n        key: my-data/input\n  outputs:\n    artifacts:\n    # Upload files from local /tmp/output folder to default object storage location that is configured for this namespace\n    # This is set to artifacts/{{workflow.namespace}}/{{workflow.name}}/{{pod.name}} by default\n    - name: output-one\n      path: /tmp/output\n    # Upload files from local /tmp/output folder to S3 prefix my-data/output\n    # This uploads to the default S3 artifact repository for this namespace\n    - name: output-two\n      path: /tmp/output\n      s3:\n        # Reference to the Workflow parameter that was set by user\n        key: '{{workflow.parameters.model-path}}'\n    # Upload files from local /tmp/output folder to the S3 prefix my-data/output in bucket defined below\n    - name: output-three\n      path: /tmp/output\n      s3:\n        key: '{{workflow.parameters.model-path}}'\n        endpoint: storage.googleapis.com\n        bucket: my-data-bucket\n        accessKeySecret:\n          name: my-s3-credentials\n          key: accessKey\n        secretKeySecret:\n          name: my-s3-credentials\n          key: secretKey\n\n")),Object(o.b)("h2",{id:"git"},"Git"),Object(o.b)("p",null,"You can also attach git repository (i.e Github) as an input artifact as follows."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'inputs:\n  artifacts:\n    - git:\n        repo: https://github.com/onepanelio/Mask_RCNN.git\n        revision: "no-boto"\n      name: src\n      path: /mnt/src\n')),Object(o.b)("p",null,"Here, we specified Github repository along with branch (",Object(o.b)("inlineCode",{parentName:"p"},"no-boto"),"). ",Object(o.b)("inlineCode",{parentName:"p"},"path")," specifies where to mount this repository."),Object(o.b)("p",null,"You can also use private repository with Workflows. For that, you first need to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token"}),"create personal access token")," from Github. Then, go to ",Object(o.b)("inlineCode",{parentName:"p"},"Settings")," and add following two environment variables. ",Object(o.b)("inlineCode",{parentName:"p"},"GITHUB_USERNAME")," and ",Object(o.b)("inlineCode",{parentName:"p"},"GITHUB_PASSWORD"),". For ",Object(o.b)("inlineCode",{parentName:"p"},"GITHUB_PASSWORD"),", you should be using your personal access token. Once this is done, you can modify above yaml section as follows to use private repository."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'inputs:\n  artifacts:\n    - git:\n        repo: https://github.com/onepanelio/Mask_RCNN.git\n        revision: "no-boto"\n        usernameSecret:\n            name: onepanel-default-env\n            key: GITHUB_USERNAME\n        passwordSecret:\n            name: onepanel-default-env\n            key: GITHUB_PASSWORD\n      name: src\n      path: /mnt/src\n')),Object(o.b)("h2",{id:"http"},"HTTP"),Object(o.b)("p",null,"You can download artifacts from different HTTP locations by using the ",Object(o.b)("inlineCode",{parentName:"p"},"http")," artifact:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"inputs:\n  artifacts:\n  # Download latest opctl and place it at /bin/opctl\n  - name: opctl\n    path: /bin/opctl\n    mode: 0755\n    http:\n      url: https://github.com/onepanelio/core/releases/latest/download/opctl-linux-amd64\n")),Object(o.b)("h2",{id:"options"},"Options"),Object(o.b)("h3",{id:"archive"},"Archive"),Object(o.b)("p",null,"Artifacts can be packaged as Tarballs and gzipped by specifying an archive strategy, using the ",Object(o.b)("inlineCode",{parentName:"p"},"archive")," field:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"...\n  outputs:\n    artifacts:\n    # Upload files from local /tmp/output folder to default object storage location that is configured for this namespace\n    # This is set to artifacts/{{workflow.namespace}}/{{workflow.name}}/{{pod.name}} by default\n    - name: output-one\n      path: /tmp/output\n      # Tar and gzip contents of /tmp/output folder and upload to the namespace configured artifact repository\n      archive:\n        tar: {}\n...\n")),Object(o.b)("h3",{id:"optional"},"Optional"),Object(o.b)("p",null,"You can also mark both input and output artifacts as optional by setting ",Object(o.b)("inlineCode",{parentName:"p"},"optional")," to ",Object(o.b)("inlineCode",{parentName:"p"},"true"),". In this case, if they don't exist, the Workflow will not throw an error:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"...\n  inputs:\n    artifacts:\n    # Download files from S3 prefix random/input into local folder /tmp/input/\n    # # This downloads from the default S3 artifact repository for this namespace\n    - name: input\n      path: /tmp/input/\n      optional: true # Don't throw an error if the file doesn't exist in the S3 location\n      s3:\n        key: my-data/input\n...\n")),Object(o.b)("h2",{id:"passing-artifacts"},"Passing artifacts"),Object(o.b)("p",null,"You can pass artifacts between tasks as shown in the example below:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'entrypoint: artifact-example\ntemplates:\n  - name: artifact-example\n    dag:\n      tasks:\n        - name: generate-artifact\n          template: whalesay\n        - name: consume-artifact\n          dependencies: [generate-artifact]\n          template: print-message\n          arguments:\n            artifacts:\n            - name: message\n              from: "{{tasks.generate-artifact.outputs.artifacts.hello-art}}"\n  - name: whalesay\n    container:\n      image: docker/whalesay:latest\n      command: [sh, -c]\n      args: ["sleep 1; cowsay hello world | tee /tmp/hello_world.txt"]\n    outputs:\n      artifacts:\n      - name: hello-art\n        path: /tmp/hello_world.txt\n  - name: print-message\n    inputs:\n      artifacts:\n      - name: message\n        path: /tmp/message\n    container:\n      image: alpine:latest\n      command: [sh, -c]\n      args: ["cat /tmp/message"]\n')))}p.isMDXComponent=!0}}]);